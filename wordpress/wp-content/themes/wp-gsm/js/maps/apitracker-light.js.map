{"version":3,"sources":["apitracker-light.js"],"names":["DG","window","WebApi","apitracker","Tracker","regUrl","jsonData","url","config","statsHost","statsRequestVersion","type","fields","addFields","addUrl","regBC","place","undefined","field","hasOwnProperty","regImpression","hash","branchId","regPOIImpression","apiKey","isBot","isUser","screen","width","location","protocol","replace","requestsQueue","push","startRequestsLoading","requestsLoading","callNextUrl","shift","ds","document","createElement","async","id","scriptId","src","onerror","onload","onCallComplete","body","appendChild","el","getElementById","parentNode","removeChild","setTimeout"],"mappings":"AAAAA,GAAKC,OAAOD,OACZA,GAAGE,OAASF,GAAGE,WAEfF,GAAGG,WAAaH,GAAGE,OAAOE,QAAU,WA+BhC,QAASC,GAAOC,GACZ,GAAIC,GAAMC,EAAOC,UAAY,MAAQD,EAAOE,mBACpB,iBAAbJ,KAIW,OAAlBA,EAASK,MAAiBL,EAASC,MACnCA,EAAMD,EAASC,KAEY,gBAApBD,GAASM,SAChBL,EAAMM,EAAUN,EAAKD,EAASM,SAGlCE,EAAOP,IASX,QAASQ,GAAMR,EAAKS,GACFC,SAAVD,IACAT,GAAO,UAAYS,GAGvBF,EAAOP,GASX,QAASM,GAAUN,EAAKK,GACpB,IAAK,GAAIM,KAASN,GACVA,EAAOO,eAAeD,KACtBX,GAAO,IAAMW,EAAQ,IAAMN,EAAOM,GAG1C,OAAOX,GAUX,QAASa,GAAcC,EAAML,EAAOM,GAChC,GAAIf,GAAMC,EAAOC,UAAY,MAAQD,EAAOE,oBAAsB,SAAWW,CAC/DJ,UAAVD,IACAT,GAAO,UAAYS,GAGNC,SAAbK,IACAf,GAAO,cAAgBe,GAG3Bf,GAAO,yBACPO,EAAOP,GAQX,QAASgB,GAAiBD,EAAUE,GAChC,GAAIjB,GAAMC,EAAOC,UAAY,MAAQD,EAAOE,oBAAsB,WAAaY,EAAW,YAAcE,CAExGV,GAAOP,GAGX,QAASkB,KACL,GAAIC,GAASzB,OAAO0B,QAAUA,OAAOC,OAASD,OAAOC,MAAQ,EAC7D,QAAQF,EAOZ,QAASZ,GAAOP,GACRkB,MAI4B,UAA5BxB,OAAO4B,SAASC,WAChBvB,EAAMA,EAAIwB,QAAQ,SAAU,WAGhCC,EAAcC,KAAK1B,GACnB2B,KAMJ,QAASA,KACDC,IAIJA,GAAkB,EAClBC,KAMJ,QAASA,KACL,GAAI7B,GAAMyB,EAAcK,OACxB,KAAK9B,EAED,YADA4B,GAAkB,EAItB,IAAIG,GAAKC,SAASC,cAAc,SAChCF,GAAGG,OAAQ,EACXH,EAAGI,GAAKC,EACRL,EAAGM,IAAMrC,EACT+B,EAAGO,QAAUP,EAAGQ,OAASC,EACzBR,SAASS,KAAKC,YAAYX,GAM9B,QAASS,KACL,GAAIG,GAAKX,SAASY,eAAeR,EAC7BO,IAAMA,EAAGE,aACTF,EAAGL,QAAUK,EAAGJ,OAAS,KACzBI,EAAGE,WAAWC,YAAYH,IAG9BI,WAAWlB,EAAa,GArK5B,GAAIO,GAAW,eAKXX,KAKAG,GAAkB,EAElB3B,GACAC,UAAW,0BACXC,oBAAqB,MA2JzB,QACIK,MAAOA,EACPV,OAAQA,EACRe,cAAeA,EACfG,iBAAkBA","file":"apitracker-light.js","sourcesContent":["DG = window.DG || {};\nDG.WebApi = DG.WebApi || {};\n\nDG.apitracker = DG.WebApi.Tracker = (function() {\n    /**\n     * ID тега <script>\n     * @type {string}\n     */\n    var scriptId = '_bcri_script';\n    /**\n     * Очередь запросов к серверу статистики\n     * @type {Array}\n     */\n    var requestsQueue = [];\n    /**\n     * Статус очереди\n     * @type {boolean}\n     */\n    var requestsLoading = false;\n\n    var config = {\n        statsHost: 'http://stat.api.2gis.ru',\n        statsRequestVersion: '2.0'\n    };\n\n    /**\n     * Регистрация любого типа статистики\n     * jsonData должен содержать:\n     *  поле type - типа статистики\n     *  url только для bc статистики,\n     *  опционально поле fields с кастомными полями для урла\n     *\n     * @param jsonData\n     */\n    function regUrl(jsonData) {\n        var url = config.statsHost + '?v=' + config.statsRequestVersion;\n        if (typeof jsonData !== 'object') {\n            return;\n        }\n\n        if (jsonData.type === 'bc' && jsonData.url) {\n            url = jsonData.url;\n        }\n        if (typeof jsonData.fields === 'object') {\n            url = addFields(url, jsonData.fields);\n        }\n\n        addUrl(url);\n    }\n\n\n    /**\n     * Регистрация Business connection\n     * @param url\n     * @param place\n     */\n    function regBC(url, place) {\n        if (place !== undefined) {\n            url += '&place=' + place;\n        }\n\n        addUrl(url);\n    }\n\n    /**\n     * Добавление кастомных полей для урла\n     * @param url\n     * @param fields\n     * @returns string\n     */\n    function addFields(url, fields) {\n        for (var field in fields) {\n            if (fields.hasOwnProperty(field)) {\n                url += '&' + field + '=' + fields[field];\n            }\n        }\n        return url;\n    }\n\n\n    /**\n     * Регистрация показа\n     * @param hash\n     * @param place\n     * @param branchId\n     */\n    function regImpression(hash, place, branchId) {\n        var url = config.statsHost + '?v=' + config.statsRequestVersion + '&hash=' + hash;\n        if (place !== undefined) {\n            url += '&place=' + place;\n        }\n\n        if (branchId !== undefined) {\n            url += '&branch_id=' + branchId;\n        }\n\n        url += '&action=reg_impression';\n        addUrl(url);\n    }\n\n    /**\n     * Регистрация показа для POI\n     * @param branchId\n     * @param apiKey\n     */\n    function regPOIImpression(branchId, apiKey) {\n        var url = config.statsHost + '?v=' + config.statsRequestVersion + '&poi_id=' + branchId + '&api_key=' + apiKey;\n\n        addUrl(url);\n    }\n\n    function isBot() {\n        var isUser = window.screen && screen.width && screen.width > 10;\n        return !isUser;\n    }\n\n    /**\n     * Добавить урл в очередь на отправку\n     * @param url\n     */\n    function addUrl(url) {\n        if (isBot()) {\n            return;\n        }\n\n        if (window.location.protocol == \"https:\") {\n            url = url.replace(/^http:/, 'https:');\n        }\n\n        requestsQueue.push(url);\n        startRequestsLoading();\n    }\n\n    /**\n     * Инициировать отправку сообщений из очереди\n     */\n    function startRequestsLoading() {\n        if (requestsLoading) {\n            return;\n        }\n\n        requestsLoading = true;\n        callNextUrl();\n    }\n\n    /**\n     * Взять очередной урл и вызвать его\n     */\n    function callNextUrl() {\n        var url = requestsQueue.shift();\n        if (!url) {\n            requestsLoading = false;\n            return;\n        }\n\n        var ds = document.createElement('script');\n        ds.async = true;\n        ds.id = scriptId;\n        ds.src = url;\n        ds.onerror = ds.onload = onCallComplete;\n        document.body.appendChild(ds);\n    }\n\n    /**\n     * Обработка завершения вызова урла\n     */\n    function onCallComplete() {\n        var el = document.getElementById(scriptId);\n        if (el && el.parentNode) {\n            el.onerror = el.onload = null;\n            el.parentNode.removeChild(el);\n        }\n\n        setTimeout(callNextUrl, 0); // next tick\n    }\n\n    // Public interface\n    return {\n        regBC: regBC,\n        regUrl: regUrl,\n        regImpression: regImpression,\n        regPOIImpression: regPOIImpression\n    };\n})();\n"],"sourceRoot":"/source/"}